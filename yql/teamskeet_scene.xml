<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scene" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[
				var xpath="//div[@class='cblock'] | //title";
				var baseurl = 'http://www.teamskeet.com';

				var res = y.rest(url).get();
				
				y.log(res.status);
				var html = res.response;
				
				var tidyhtml = y.tidy(html);
				var results = new XML(tidyhtml);

				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				
				
				
				
				//var results = y.xpath(xml, xpath);
				
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				var responseXML = <scene></scene>;
				var titledata = results.title.text().toString().match(/(.[^|]+) \| (.[^|]+) \| (.[^|]+) \| (.+)/);

				function processScene(scenedata) {
					var sceneurl = url;
					y.log(scenedata);
					
					
					try {
						responseXML.site += <site>{scenedata..a.(@href.toString().match(/\/site\//))[0].text().toString().replace(/\.com/,"")}</site>;
					} catch(e) {y.log('site: ' + e);}
					
					try {
					
						var title = titledata[2];
						responseXML.title += <title>{title}</title>;
						responseXML.titleclean += <titleclean>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ")}</titleclean>;
					} catch(e) {y.log('title: ' + e);}
					
					
					try {
					var posterdata = scenedata..video.(@id=="video").@poster.toString().replace(/low/,"hi");
					responseXML.poster += <poster>{posterdata}</poster>;
					} catch(e) {y.log('poster: ' + e);}
					
					try {
					var releasedate = scenedata..div.(@class=="gray" && @style=="white-space:nowrap;").text().toString().trim().replace(/Date Added../,"");
					y.log(releasedate);
					releasedate = releasedate.replace(/(\d)(st|nd|rd|th)/,"$1")
					//var date = new Date(releasedate);
					//responseXML.dateiso += <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch(e) {y.log('date: ' + e);}
					
					responseXML.thumbs += <thumbs></thumbs>;
					responseXML.images += <images></images>;
					
					for each (a in scenedata..a.(@class=="boxclass")) {
						responseXML.images.image += <image>{a.@href}</image>;
						responseXML.thumbs.thumb += <thumb>{a.img.@["data-original"]}</thumb>;
					}
					
					responseXML.models += <models></models>;

					var castTemp = titledata[1].split(' and ');
					responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : "" }</cast>
				
					var tagsTemp = [];
				
					for each (var tag in scenedata..a.(@href.toString().match(/tags=/))) {
						tagsTemp.push(tag.text());
					}
					responseXML.tags += <tags>{tagsTemp.join(', ')}</tags>;
					
					try {
					var desc = scenedata..div.(@class=="gray" && @style=="text-align:justify;margin:10px;").text().toString().trim();
					responseXML.description += <desc>{desc}</desc>;
					} catch(e) {y.log('desc: ' + e);}
					
				}

				processScene(results.div);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>