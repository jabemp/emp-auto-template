<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scene" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[
				var scheme = 'https';
				var baseurl = scheme + '://dateslam.com';
				
				var xpath="//meta[@property='article:published_time'] | //div[@class='single-update grid-container']";
				var results = y.rest(url).accept('text/html').get().response;
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				var responseXML = <scene></scene>;
				function getText(node, desc) {
					for each (var j in node.descendants()) {
						if(j.nodeKind() == 'text' || j.hasSimpleContent()) {
							desc += j.text();
						} else {
							desc += getText(j, desc);
						}
						
					}
					return desc;
				}
				function processScene(scenedata) {
					var sceneurl = url;
					//y.log(scenedata);
					
					try {
						var title = scenedata..div.(@class == 'post-title cell small-12').a.@title.toString().replace(/\u00A0/g, ' ').trim();
						responseXML.title += <title>{title}</title>;
					} catch(e) {y.log('title:' + e);}
					
					try {
						var poster = scenedata..div.(/flowplayer/.test(@class)).@['data-poster'].toString();
						responseXML.poster += <poster>{poster}</poster>;
					} catch(e) {y.log('poster:' + e);}
					
					try {
						var trailer = scenedata..video.source.@src.toString();
						responseXML.trailer += <trailer>{baseurl + trailer}</trailer>;
					} catch(e) {y.log('trailer:' + e);}
					
					try {
						var releasedate = scenedata.meta.@content.toString().trim();
						//y.log(releasedate);
						var date = releasedate.split('T')[0];
						
						responseXML.dateiso += <dateiso>{date}</dateiso>;
					} catch(e) {y.log('date:' + e);}
					
					responseXML.thumbs += <thumbs></thumbs>;
					responseXML.images += <images></images>;
					
					
					try {
						for each (var a in scenedata..div.(/post-gallery-item cell/.test(@class)).a) {
							responseXML.thumbs.thumb += <thumb>{a.img.@src}</thumb>;
							var image = a.@href.toString();
							if(image.indexOf('jpg') < 0) {
								image = a.img.@src.toString().replace(/256x256/, '1024x655');
							}
							responseXML.images.image += <image>{image}</image>;
						}
					
					} catch(e) {y.log('images: ' + e);}
					try {
						var castTemp = [];
						var modelTemp = scenedata..div.(@class == 'post-meta-wrapper grid-container')..div.(@class == 'cell').text().toString();
						//y.log(modelTemp);
						modelTemp = modelTemp.split(',')[0].trim();
						castTemp.push(modelTemp);
						
						responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : "" }</cast>
					} catch(e) {y.log('models:' + e);}
					
					
					
					try {
						var tags = y.xpath(scenedata,"//div[@class='post-cats']/a");
				
						var tagsTemp = [];
				
						for each (var tag in tags) {
							tagsTemp.push(tag.text());
						}
					responseXML.tags += <tags>{tagsTemp.join(', ')}</tags>;
					} catch(e) {y.log('tags:' + e);}
					
					
					try {
						var descNode = y.xpath(scenedata,"//div[@class='post-narrative grid-x grid-padding-x']");
						var description = "";

						var narrative = false;
						var previous = '';
						for each (var node in descNode.descendants()) {
							if (node.name() == 'div' && node.@class == 'post-cats') {
								break;
							}

							if (node.nodeKind() == 'text') {
								if (!narrative) {
									description += '[b]' + node.toString() + '[/b][br][br]';
									narrative = true;
								} else if (node.toString() != previous) {
									description += ' ' + node.toString();
									previous = node.toString();
								}
							} else if (node.name() == 'a' && node.toString() != previous) {
								description += ' ' + node.toString();
								previous = node.toString();
							}
						}
						responseXML.description += <desc>{description.replace(/[^\x00-\x7F]/g, ' ').replace(/\s+/g, ' ')}</desc>;
					} catch(e) {y.log('desc:' + e);}
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>
