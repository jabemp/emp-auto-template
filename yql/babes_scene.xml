<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[
				var scheme = 'https';
				var baseurl = scheme + '://www.babes.com';
				var xpath = "//div[@class='wrapper' and ./div/@class='video-info'] | //input[@id='sceneid']";
				
				var results = y.rest(url).accept('text/html').get().response;
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				
				var responseXML = <scene></scene>;
				
				function processScene(scenedata) {
					//y.log(scenedata);
					var sceneid = scenedata.input.@value.toString();
					responseXML.id += <id>{sceneid}</id>;
					
					try {
						var title = scenedata..h1.text().toString().replace(/\u00A0/g, ' ').trim();
						responseXML.title += <title>{title}</title>;
						responseXML.titleclean += <titleclean>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ")}</titleclean>;
					} catch (err) {y.log('title: ' + err);}
					
					try {
						var scriptdata = y.xpath(scenedata, '//script[contains(text(), "poster")]').toString();
						//y.log(scriptdata);
						var poster = scriptdata.match(/("poster":")(.[^"]+)/)[2].replace(/\\/g,'');
						//y.log(poster);
						responseXML.poster += <poster>{scheme + ':' + poster }</poster>;
					} catch(e) {y.log('poster:' + e);}
					
					
					try {
						var releasedate = scenedata..span.(@class== 'video-info__date').text().toString();
						//y.log(releasedate);
						var date = new Date(releasedate);
						responseXML.dateiso += <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch (err) {y.log('date: ' + err);}
					
					responseXML.thumbs += <thumbs></thumbs>;
					responseXML.images += <images></images>;
					
					/*try {
						for each (var a in scenedata.div..img) {
							responseXML.thumbs.thumb += <thumb>{a.@src}</thumb>;
						}
					} catch (err) {y.log('img: ' + err)}*/
					
				
					try {
						//var models = y.xpath(scenedata,"//a[contains(@class,'model-name')]");
						var castTemp = [];
						responseXML.models += <models></models>;
							
						for each (var a in scenedata..h2.(@class=='video-bar__models').a) {
						    model = <model></model>;
						    model.model += <name>{a.text().trim().replace(/\u00a0/, ' ')}</name>;
						    model.url += <url>{(a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl ) + a.@href}</url>;
						    castTemp.push(a.text().trim().replace(/\u00a0/, ' '));
						    responseXML.models.model += model;
						}
						responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : ""}</cast>
					} catch (err) {y.log('cast: ' + err);}
					
					try {
						var tags = y.xpath(scenedata,"//a[contains(@href,'categories')]");
				
					    var tagsTemp = [];
				    
					    for each (var tag in tags) {
					    	tagsTemp.push(tag.text().toString().replace(/\n/g,''));
					    }
						responseXML.tags += <tags>{tagsTemp.join(', ')}</tags>;
					} catch (err) {y.log('tags: ' + err);}
					
					var description = "";
					try {
					
					   var descNode = scenedata..p.(@class=='section-detail section-detail--description');
					   description = descNode.text().toString().trim();
					   
					   } catch (err) {y.log('desc: ' + err);}
					responseXML.description += <desc>{description}</desc>;
					
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>