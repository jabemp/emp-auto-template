<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
	<meta>
   </meta>
   <bindings>
		<select itemPath="scenes.scene" produces="XML">
			<inputs>
			 <key id="time" type="xs:string" paramType="variable" required="false"/>
		   </inputs>
			<execute><![CDATA[
				var scheme = 'https';
				var baseurl = scheme + '://www.puretaboo.com';
				
				var url = baseurl + '/en/';
				
				
				url += (time == 'upcoming' ? 'upcomingvideo' : 'videos');
				
				var xpath = '//ul[@class="sceneList"]/li';
				if(time == 'upcoming') {
					xpath = '//div[@class="content"]';
				}

				var results = y.rest(url).accept('text/html').get().response;
				if (xpath) {
					results = y.xpath(results, xpath);
				}
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}

				
				responseXML = <scenes></scenes>;
								
				function processScene(scenedata) {
					var scene = <scene></scene>;
					scenelink = scenedata.a[0];
					
					try {
						var sceneurl = scenelink.@href.toString();
						scene.url += <url>{( sceneurl.substring(0, 4) == 'http' ? '' : baseurl ) + sceneurl}</url>;
					} catch(e) { y.log('url: ' + e);}
					
					var sceneinfo = scenedata.div.(@class == 'sceneInfo');
					
					try {
						var title = sceneinfo.h3.a.text().toString().trim();
						scene.title += <title>{title}</title>;
						scene.titlematch += <titlematch>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ").replace(/ - /, " ").trim().toLowerCase()}</titlematch>;
					} catch(e) { y.log('title: ' + e);}
					
					responseXML.scenes += scene;
				}
				
				function processUpcomingScene(scenedata) {
					var scene = <scene></scene>;
					scenelink = scenedata..a.(@class == 'sceneLink  ');
					
					try {
						var sceneurl = scenelink.@href.toString();
						scene.url += <url>{( sceneurl.substring(0, 4) == 'http' ? '' : baseurl ) + sceneurl}</url>;
					} catch(e) { y.log('url: ' + e);}
					
					try {
						var title = scenedata..h3.(@class == 'sceneTitle').text().toString().trim();
						scene.title += <title>{title}</title>;
						scene.titlematch += <titlematch>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ").replace(/ - /, " ").trim().toLowerCase()}</titlematch>;
					} catch(e) { y.log('title: ' + e);}
					
					responseXML.scenes += scene;
				}
				if(time == 'upcoming') {
					processUpcomingScene(results);
				} else {
					for each (var scene in results.div) {
						processScene(scene);
					}
				}
				
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>