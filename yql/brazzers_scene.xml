<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[
				
				var xpath = "//h1 | //div[@class='video_description' or @class='video-description'] | //p[@class='related-model']/a | //div[@class='tag-card-container'] | //a[@class='pirobox_gall'] | //div[@class='more-scene-info'] | //ul[@class='timeline'] | //meta[@itemprop='thumbnailUrl'] | //script[contains(text(), 'videoUiOptions')]";
				
				var results = y.rest(url).accept('text/html').get().response;
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				var baseurl = 'https://www.brazzers.com';
				var responseXML = <scene></scene>;
				
				//var results = query.results;
				function processScene(scenedata) {
					var sceneurl = url;
					//y.log(scenedata);
					var sceneid = sceneurl.match(/(episode|id)\/(\d{4,})/)[2];
					
					var site = scenedata..span.(@class == "label-text")[0].text();
					responseXML.site += <site>{site}</site>;
					
					responseXML.id += <id>{sceneid}</id>;
					
					var title = scenedata.h1.text().toString().replace(/\u00A0/g, ' ').trim();
					responseXML.title += <title>{title}</title>;
					responseXML.titleclean += <titleclean>{title.replace(/[^a-z0-9- ]/gi,"").replace(/\s+/g, " ")}</titleclean>;
					
					
					var releasedate = scenedata.div.aside.(@class = "scene-date").text().toString().trim();
					var date = new Date(releasedate);
					//responseXML.date = <date>{releasedate}</date>;
					
					//var datealtstring = datealt.getFullYear().toString().substring(2,4) + '.' + zeroFill(datealt.getMonth() + 1,2) + '.' + zeroFill(datealt.getDate(),2);
					responseXML.dateiso += <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					
					responseXML.poster += <poster>{'https:'+scenedata.meta.@content}</poster>;
					
					responseXML.thumbs += <thumbs></thumbs>;
					responseXML.images += <images></images>;
					
					var thumbs = y.xpath(scenedata,"//a[@class='pirobox_gall']");
					
					/*for(i=1;i < 6;i++) {
						var thmlink = 'http://static.brazzers.com/scenes/' + sceneid + '/preview/thm/' + zeroFill(i,2) + '.jpg'
						var imglink = 'http://static.brazzers.com/scenes/' + sceneid + '/preview/img/' + zeroFill(i,2) + '.jpg'
						responseXML.thumbs.thumb += <thumb>{thmlink}</thumb>;
						responseXML.images.image += <image>{imglink}</image>;
					}*/
					for each (var a in thumbs) {
						responseXML.thumbs.thumb += <thumb>{'https:' + a.img.@src}</thumb>;
						responseXML.images.image += <image>{'https:' + a.@href}</image>;
					}
					
					try {
						var trailerdata = scenedata.script.toString();
						//y.log(trailerdata);
						var window = {};
						var trailerObject = eval(trailerdata);
						var trailer = trailerObject.streams.stream_info.downloadHttp.paths.mp4_272_650;
						
						responseXML.trailer += <trailer>{(trailer.substring(0, 4) == 'http' ? '' : 'https:') + trailer}</trailer>;
					} catch(e) {y.log('trailer: ' + e); }
					
					
					var models = y.xpath(scenedata,"//a[contains(@href,'profile')]");
				
					var castTemp = [];
					responseXML.models += <models></models>;
				
					for each (var a in models) {
						model = <model></model>;
						model.model += <name>{a.text().toString().trim()}</name>;
						model.url += <url>{(a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl ) + a.@href}</url>;
						castTemp.push(a.text().toString().trim());
						responseXML.models.model += model;
					}
					responseXML.cast = <cast>{niceList(castTemp)}</cast>
					
					
					var tags = y.xpath(scenedata,"//div[@class='tag-card-container']/a");
				
					var tagsTemp = [];
				
					for each (var tag in tags) {
						tagsTemp.push(tag.text());
					}
					//ul.timeline > li > div > a > var
					var tags2 = y.xpath(scenedata,"//ul[@class='timeline']/li/div/a/var");
				
					tagsTemp2 = [];
				
					for each (var tag in tags2) {
						tagsTemp2.push(tag.text());
					}
					responseXML.tags += <tags>{tagsTemp.concat(tagsTemp2).join(', ')}</tags>;
					
					
					
					//responseXML.timelinetags += <timelinetags>{tagsTemp2.join(', ')}</timelinetags>;
					
					
					
					responseXML.description += <desc>{scenedata.div.(@class == "video_description" || @class== "video-description").p.text().toString().trim()}</desc>;
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>