<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scene" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
			 <key id="picurl" type="xs:string" paramType="variable" required="false"/>
		   </inputs>
			<execute><![CDATA[
				var scheme = 'https';
				var baseurl = scheme + '://www.sweetheartvideo.com';
				
				var xpath="//h3[@class='title'] | //script[contains(text(),'picPreview')] | //div[@id ='infoWrapper'] | //div[@class= 'buttonHolder picturesItem lastControl']"
				var results = y.rest(url).accept('text/html').get().response;
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				
				var responseXML = <scene></scene>;
				
				function processScene(scenedata) {
					var sceneurl = url;
					//y.log(scenedata);
					
					try {
						var title = scenedata.h3.text().toString().replace(/\u00A0/g, ' ').trim();
						responseXML.title += <title>{title}</title>;
					} catch(e) {y.log('title:' + e);}
					
					try {
						var poster = scenedata.script.toString().match(/https:.[^"]+jpg/).toString().replace(/\\/g,"");
						responseXML.poster += <poster>{poster}</poster>;
					} catch(e) {y.log('poster:' + e);}
					
					try {
						var releasedate = scenedata..div.(@class == 'updatedDate').text().toString();
						y.log(releasedate);
						var parts = releasedate.split("-");
						var date = new Date(parts[2], parts[0] - 1, parts[1]);

						responseXML.dateiso += <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch(e) {y.log('date:' + e);}
					
					responseXML.thumbs += <thumbs></thumbs>;
					responseXML.images += <images></images>;
					
					/*var id = responseXML.poster.match(/\d{5,6}/g)[1];
					var domain = responseXML.poster.match(/[^\.]+/);
					for (i = 1; i < 16; i++) { 
						var imagelink = domain + '.gammacdn.com/s/movies/' + id + '/' +  id + '_01/pictures/sc_' + id + '_01_' + zeroFill(i,2) + '.jpg';
						responseXML.images.image += <image>{imagelink}</image>;
					}*/
					
					try {
						var models = y.xpath(scenedata,"//div[@class='pornstarNameAndAge']/div/a");
						var castTemp = [];
						responseXML.models += <models></models>;
				
						for each (var a in models) {
							model = <model></model>;
							model.model += <name>{a.strong.text()}</name>;
							model.url += <url>{(a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl ) + a.@href}</url>;
							castTemp.push(a.strong.text());
							responseXML.models.model += model;
						}
						responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : "" }</cast>
					} catch(e) {y.log('models:' + e);}
					
					/*try {
						
						var picset = picurl ? <div><a href={picurl}></a></div> : scenedata..div.(@class == 'buttonHolder picturesItem lastControl');
						if (picset) {
							var picseturl = (picset.a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl) + picset.a.@href;
							
							var picsetxpath = '//ul[@class="photoset"]/li | //div[@class = "photosetNbPics"]';
							var picsetpage = y.rest(picseturl).accept('text/html').get().response;
							if (picsetxpath) {
								picsetpage = <results>{y.xpath(picsetpage, picsetxpath)}</results>;
							}
							
							
							var totalpics = picsetpage..div.(@class == 'photosetNbPics').span.(@class == 'nbPicsValue').text().toString();
							y.log('total:' + totalpics);
							
							if (totalpics > 0) {
								var firstpic = picsetpage..li.(/preview/.test(@class))[0].a.img.@src.toString();
								y.log(firstpic);
								var fullpic = firstpic.replace(/(photo_set)/,'s/$1').replace(/\/thumbs/, '').replace(/_tb/, '');
								y.log(fullpic);
								var curlExpr=fullpic.replace(/_(001)/,'_[$1-' + zeroFill(totalpics,3) + ']');
								y.log(curlExpr);
								responseXML.picsetCurl += <picsetCurl>{curlExpr}</picsetCurl>;
							}
											
							responseXML.photos += <photos></photos>;
							for (i = 1; i <= totalpics; i++) { 
								var imagelink = fullpic.replace(/_(001)/,'_' + zeroFill(i,3));
								responseXML.photos.photo += <photo>{imagelink}</photo>;
							}

						}
					} catch(e) {y.log('picset: ' + e);}*/
					
					try {
						var tags = y.xpath(scenedata,"//div[@class='sceneCol sceneColCategories']/a");
				
						var tagsTemp = [];
				
						for each (var tag in tags) {
							tagsTemp.push(tag.text());
						}
					responseXML.tags += <tags>{tagsTemp.join(', ')}</tags>;
					} catch(e) {y.log('tags:' + e);}
					
					try {
						var descNode = y.xpath(scenedata,"//div[@class='sceneDesc bioToRight showMore']");
						var description = "";
						i = 0;
						for each(var child in descNode.*) {
							var tmp = child.toString().trim();
							if(tmp != "" && i > 0) {
								description += tmp + '\n\n'; 
							}
							i++;
						}
						responseXML.description += <desc>{description.replace(/[^\x00-\x7F]/g, ' ').replace(/\s+/g, ' ')}</desc>;
					} catch(e) {y.log('desc:' + e);}
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>