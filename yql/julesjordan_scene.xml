<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scene" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[

				var xpath="//span[@class='title_bar_hilite'] | //script[contains(text(),'useimage')] | //span[@class='update_description'] | (//span[@class='update_models'])[1] | //span[@class='update_tags'] | (//div[@class='cell update_date'])[1] | //div[@class='cell content_tab' and ./a[text()='Photos']]";
				
				var results = y.rest(url).accept('text/html').get().response;
				//var results = y.tidy(html);
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}

				var baseurl = 'https://www.julesjordan.com';
				var responseXML = <scene></scene>;
				

				function processScene(scenedata) {
					var sceneurl = url;
					//y.log(scenedata);
					try {
						var title = scenedata.span.(@class == "title_bar_hilite").text().toString().replace(/\u00A0/g, ' ').trim();
						//y.log('title pre: ' + title);
						title = title.replace(/&#039;/g, "'");
						//y.log('title post: ' + title);
						responseXML.title += <title>{title}</title>;
					} catch(e) { y.log('title: ' + e);}
					
					try {
						var poster = scenedata.script.toString().match(/useimage.=."(.[^"]+)/)[1].toString().replace(/4x/,"1x");
						responseXML.poster += <poster>{(poster.substring(0, 4) == 'http' ? '' : baseurl ) + poster}</poster>;
					} catch(e) { y.log('poster: ' + e);}
					
					try {
						var releasedatetemp = scenedata.div.(@class == "cell update_date").text();
						//y.log(releasedatetemp);
					
						var urlparts = releasedatetemp.toString().trim().split('/');
						//y.log(urlparts[2], urlparts[0] - 1, urlparts[1]);

						var date = new Date(urlparts[2], urlparts[0] - 1, urlparts[1]);
						
						responseXML.dateiso = <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch(e) { y.log('date: ' + e);}
					
					responseXML.images += <images></images>;
					
					try {
						var images = y.rest(baseurl + '/trial/index.php').accept('text/html').get().response;
						var imgxpath = "//div[@class='update_details']/a[@href='" + url + "']/img";
						imgsrcs = <results>{y.xpath(images, imgxpath)}</results>;
						//y.log(imgsrcs);
						var img = [];
						var imgtemp = '';
						for each (var imgsrc in imgsrcs.img) {
							for (i = 0; i < 7; i++) { 
								var prop = 'src' + i.toString();
								if (i != 1) {
									prop += '_1x';
								}
								//y.log('Checking property "' + prop + '"');
								var currentImage = imgsrc.@[prop].toString();
								//y.log('Result: ' + currentImage);
								if (currentImage) {
									//y.log('pushing ' + currentImage);
									imgtemp+= (currentImage.substring(0, 4) == 'http' ? '' : baseurl ) + '' + currentImage + ',';
								}
							}
						}
						img = imgtemp.replace(/,$/, "").split(',');
						for (i = 0; i < img.length; i++) {
							responseXML.images.image += <image>{img[i]}</image>;
						}
						//y.log(img);
					} catch(e) { y.log('images: ' + e);}
					
					
					try {
						var photoslink = scenedata.div.(@class == 'cell content_tab').a.@href;
						y.log('photos: ' + photoslink);
						var picsetresults = y.rest(photoslink).accept('text/html').get().response;
						
						var thumbXpath = '//div[@class="photo_gallery_thumbnail_wrapper"]/a/img';
						var firstpic = y.xpath(picsetresults, thumbXpath)[0].@src;
						y.log('First pic: ' + firstpic);
						
						var lastPageXpath = '(//div[@class="page_numbers"]/a[not(./span/text()="Next >")])[last()]';
						var lastPageurl = baseurl + '/trial/' + y.xpath(picsetresults, lastPageXpath).@href;
						y.log('last page: '+ lastPageurl);
						
						var lastpicsetresults = y.rest(lastPageurl).accept('text/html').get().response;
						var lastpic =  y.xpath(lastpicsetresults, '(' + thumbXpath + ')[last()]').@src;
						y.log('lastpic: ' + lastpic);
						var lastimgnumber = lastpic.match(/(\d*)\.jpg/)[1];
						y.log(lastimgnumber);
						
						var rplc = '_[1-' + lastimgnumber.toString() + '].jpg';
						y.log(rplc);
						var curlExpr = ((firstpic.toString().substring(0, 4) == 'http' ? '' : baseurl ) + firstpic.toString().replace(/_1\.jpg/, rplc)).replace(/\/thumbs\//, '/photos/');
						y.log(curlExpr);
						responseXML.picsetCurl += <picsetCurl>{curlExpr}</picsetCurl>;
						
					} catch (e) { 
						y.log('Photoset: ' + e);
					}
					
					try {
						var models = y.xpath(scenedata,"//span[@class='update_models']/a");
				
						var castTemp = [];
						responseXML.models += <models></models>;
				
						for each (var a in models) {
							model = <model></model>;
							model.model += <name>{a.text()}</name>;
							model.url += <url>{(a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl ) + a.@href}</url>;
							castTemp.push(a.text());
							responseXML.models.model += model;
						}
						responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : "" }</cast>
					} catch(e) { y.log('cast: ' + e);}
					
					try {
						var tags = y.xpath(scenedata,"//span[@class='update_tags']/a[not(text()='4K')]");
				
						var tagsTemp = [];
				
						for each (var tag in tags) {
							tagsTemp.push(tag.text());
						}
					responseXML.tags += <tags>{tagsTemp.join(', ')}</tags>;
					} catch(e) {y.log('tags:' + e);}
					
					try {
						var descNode = y.xpath(scenedata,"//span[@class='update_description']");
						var description = descNode.text().toString();
						
						responseXML.description += <desc>{description}</desc>;
					} catch(e) { y.log('desc: ' + e);}
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>
