<?xml version="1.0" encoding="UTF-8" ?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" securityLevel="any" https="false">
   <bindings>
		<select itemPath="scene" produces="XML">
			<inputs>
			 <key id="url" type="xs:string" paramType="variable" required="true"/>
		   </inputs>
			<execute><![CDATA[
				var xpath="//script[contains(text(), 'thumbnailUrl')] | //div[@class='video-container'] | //title | //p[@class='description'] | //p[./a[contains(@href,'/tag/')]] | //p[./a[contains(@href,'/category/')]] | (//div[@class='col date'])[1] | //img[@class='owl-lazy']";
				
				var html = y.rest(url).accept('text/html').get().response;
				var results = y.tidy(html);
				//y.log(results);
				if (xpath) {
					results = <results>{y.xpath(results, xpath)}</results>;
				}
				var niceList = function(array, join, finalJoin) {
					if (array.length == 1) return array[0];
					var arr = array.slice(0), last = arr.pop();
					join = join || ', ';
					finalJoin = finalJoin || ' & ';
					return arr.join(join) + finalJoin + last;    
				};
				function zeroFill( number, width ) {
				  width -= number.toString().length;
				  if ( width > 0 )
				  {
					return new Array( width + (/\./.test( number ) ? 2 : 1) ).join( '0' ) + number;
				  }
				  return number + ""; // always return a string
				}
				var baseurl = 'https://porndoepremium.com';
				var responseXML = <scene></scene>;
				

				function processScene(scenedata) {
					var sceneurl = url;
					//y.log(scenedata);
					try {
						var title = scenedata.title.text().toString().replace(/\u00A0/g, ' ').trim();
						//y.log('title pre: ' + title);
						title = title.replace(/&#039;/g, "'");
						//y.log('title post: ' + title);
						responseXML.title += <title>{title}</title>;
					} catch(e) { y.log('title: ' + e);}
					
					try {
						var poster = scenedata.script.toString().match(/thumbnailUrl....(https[^"]+)/)[1];
						responseXML.poster += <poster>{poster}</poster>;
					} catch(e) { y.log('poster: ' + e);}
					
					try {
						responseXML.trailer += <trailer>{scenedata..div.(@class == 'video-container').@['data-video-preview']}</trailer>;
					} catch(e) { y.log('trailer: ' + e);}
					
					try {
						var releasedatetemp = scenedata..div.(@class == "col date")[0].p.span.text();
						
						var dateparts = releasedatetemp.split('.');
						//19.05.18
						var year = '20' + dateparts[2];
						//y.log(year);
						var date = new Date(parseInt(year), dateparts[1] - 1, parseInt(dateparts[0],10));
						
						responseXML.dateiso = <dateiso>{date.toISOString().substring(0,10)}</dateiso>;
					} catch(e) { y.log('date: ' + e);}
					
					
					try {
						
						responseXML.images += <images></images>;

						for each (var img in scenedata..img) {
							var fullimage = img.@['data-src'].toString().replace(/thumb\/\d+x\d+\//, '');
							y.log('full image: ' + fullimage);
							responseXML.images.image += <image>{fullimage}</image>;
						}
						
					} catch(e) {
						y.log('images: ' + e);
					}
					
					
					
					
					
					try {
						var models = y.xpath(scenedata,"//a[contains(@href,'pornstars-profile')]");
				
						var castTemp = [];
						responseXML.models += <models></models>;
				
						for each (var a in models) {
							model = <model></model>;
							model.model += <name>{a.text()}</name>;
							model.url += <url>{(a.@href.toString().substring(0, 4) == 'http' ? '' : baseurl ) + a.@href}</url>;
							castTemp.push(a.text());
							responseXML.models.model += model;
						}
						responseXML.cast = <cast>{castTemp.length > 0 ? niceList(castTemp) : "" }</cast>
					} catch(e) { y.log('cast: ' + e);}
					
					try {
					
					var tags = y.xpath(scenedata,"//a[contains(@href, '/tag/')]");
				
						var tagsTemp = [];
				
						for each (var tag in tags) {
							tagsTemp.push(tag.text());
						}

						var categories = y.xpath(scenedata,"//span[@class='video-categories-list']/@data-category");
		
					responseXML.tags += <tags>{tagsTemp.join(', ') + ', ' + categories.toString().replace(/,/g, ", ")}</tags>;
					} catch(e) {y.log('tags:' + e);}
					
					try {
						var descNode = y.xpath(scenedata,"//p[@class='description']");
						var description = descNode.text().toString();
						
						responseXML.description += <desc>{description}</desc>;
					} catch(e) { y.log('desc: ' + e);}
				}
				processScene(results);
				
				
				response.object = responseXML;
			]]></execute>
		</select>
	</bindings>
</table>
